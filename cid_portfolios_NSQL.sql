SELECT 

@SELECT:DIM:USER_DEF:IMPLIED:FINSUMMARY:ROWNUM:ID@,
@SELECT:DIM:USER_DEF:IMPLIED:FINSUMMARY_PORTFOLIO:PORTFOLIO_ID:PORTFOLIO_ID@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY_PORTFOLIO:PORTFOLIO_NAME:PORTFOLIO_NAME@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY_PORTFOLIO:PORTFOLIO_START_DT:PORTFOLIO_START_DT@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY_PORTFOLIO:PORTFOLIO_FINISH_DT:PORTFOLIO_FINISH_DT@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY_PORTFOLIO:PORTFOLIO_BUDGET:PORTFOLIO_BUDGET@,

@SELECT:METRIC:USER_DEF:IMPLIED:PORTFOLIO_BUDGET_m:PORTFOLIO_BUDGET_m@,

@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:INVESTMENT_PRID:INVESTMENT_PRID@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:INVESTMENT_ID:INVESTMENT_ID@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:ENTITY_CODE:ENTITY_CODE@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:INVESTMENT_NAME:INVESTMENT_NAME@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:INVESTMENT_TYPE:INVESTMENT_TYPE@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:IS_ACTIVE:IS_ACTIVE@,
@SELECT:DIM_PROP:USER_DEF:BOOLEAN:FINSUMMARY:IS_ACTIVE_BOOL:IS_ACTIVE_BOOL@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:MANAGER_ID:MANAGER_ID@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:PRIORITY:PRIORITY@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:PROGRESS_CODE:PROGRESS_CODE@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:PROGRESS_NAME:PROGRESS_NAME@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:MANAGER_NAME:MANAGER_NAME@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:OPEN_FOR_TE:OPEN_FOR_TE@,
@SELECT:DIM_PROP:USER_DEF:BOOLEAN:FINSUMMARY:OPEN_FOR_TE_BOOL:OPEN_FOR_TE_BOOL@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:PROJECT_TYPE:PROJECT_TYPE@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:PROJECT_TYPE_ID:PROJECT_TYPE_ID@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:DEPARTMENT_TYPE:DEPARTMENT_TYPE@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:BUSINESS_UNIT_ID:BUSINESS_UNIT_ID@,
@SELECT:DIM_PROP:USER_DEF:IMPLIED:FINSUMMARY:BUSINESS_UNIT_NAME:BUSINESS_UNIT_NAME@,

@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_TOTAL_COST:FORECAST_TOTAL_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_TOTAL_COST:BUDGET_TOTAL_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:ACTUAL_TOTAL_COST:ACTUAL_TOTAL_COST@,

@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_LABOR_COST:BUDGET_LABOR_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_SOFTWARE_COST:BUDGET_SOFTWARE_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_HARDWARE_COST:BUDGET_HARDWARE_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_PROFSERV_COST:BUDGET_PROFSERV_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_OTHER_COST:BUDGET_OTHER_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_OTHERCOM_COST:BUDGET_OTHERCOM_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_CHARGE_COST:BUDGET_CHARGE_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_SUMMARY_COST:BUDGET_SUMMARY_COST@,

@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_LABOR_COST:FORECAST_LABOR_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_SOFTWARE_COST:FORECAST_SOFTWARE_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_HARDWARE_COST:FORECAST_HARDWARE_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_PROFSERV_COST:FORECAST_PROFSERV_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_OTHER_COST:FORECAST_OTHER_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_OTHERCOM_COST:FORECAST_OTHERCOM_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_CHARGE_COST:FORECAST_CHARGE_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_SUMMARY_COST:FORECAST_SUMMARY_COST@,

@SELECT:METRIC:USER_DEF:IMPLIED:ACTUAL_LABOR_COST:ACTUAL_LABOR_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:ACTUAL_SOFTWARE_COST:ACTUAL_SOFTWARE_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:ACTUAL_HARDWARE_COST:ACTUAL_HARDWARE_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:ACTUAL_PROFSERV_COST:ACTUAL_PROFSERV_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:ACTUAL_OTHER_COST:ACTUAL_OTHER_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:ACTUAL_OTHERCOM_COST:ACTUAL_OTHERCOM_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:ACTUAL_CHARGE_COST:ACTUAL_CHARGE_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:ACTUAL_SUMMARY_COST:ACTUAL_SUMMARY_COST@,

@SELECT:METRIC:USER_DEF:IMPLIED:ACTUAL_EXT_LABOR_COST:ACTUAL_EXT_LABOR_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:ACTUAL_EXT_PROFSERV_COST:ACTUAL_EXT_PROFSERV_COST@,
@SELECT:METRIC:USER_DEF:IMPLIED:ACTUAL_CHARGE_COST:ACTUAL_EXT_CHARGE_COST@,

@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_FORECAST_TOTAL_VAR:BUDGET_FORECAST_TOTAL_VAR@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_FORECAST_LABOR_VAR:BUDGET_FORECAST_LABOR_VAR@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_FORECAST_SOFTWARE_VAR:BUDGET_FORECAST_SOFTWARE_VAR@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_FORECAST_HARDWARE_VAR:BUDGET_FORECAST_HARDWARE_VAR@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_FORECAST_PROFSERV_VAR:BUDGET_FORECAST_PROFSERV_VAR@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_FORECAST_OTHER_VAR:BUDGET_FORECAST_OTHER_VAR@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_FORECAST_OTHERCOM_VAR:BUDGET_FORECAST_OTHERCOM_VAR@,
@SELECT:METRIC:USER_DEF:IMPLIED:BUDGET_FORECAST_CHARGE_VAR:BUDGET_FORECAST_CHARGE_VAR@,

@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_ACTUAL_TOTAL_VAR:FORECAST_ACTUAL_TOTAL_VAR@,
@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_ACTUAL_LABOR_VAR:FORECAST_ACTUAL_LABOR_VAR@,
@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_ACTUAL_SOFTWARE_VAR:FORECAST_ACTUAL_SOFTWARE_VAR@,
@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_ACTUAL_HARDWARE_VAR:FORECAST_ACTUAL_HARDWARE_VAR@,
@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_ACTUAL_PROFSERV_VAR:FORECAST_ACTUAL_PROFSERV_VAR@,
@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_ACTUAL_OTHER_VAR:FORECAST_ACTUAL_OTHER_VAR@,
@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_ACTUAL_OTHERCOM_VAR:FORECAST_ACTUAL_OTHERCOM_VAR@,
@SELECT:METRIC:USER_DEF:IMPLIED:FORECAST_ACTUAL_CHARGE_VAR:FORECAST_ACTUAL_CHARGE_VAR@

FROM (

SELECT
  PORTFOLIO_ID,
  PORTFOLIO_NAME,
  PORTFOLIO_START_DT,
  PORTFOLIO_FINISH_DT,
  PORTFOLIO_BUDGET,
  PORTFOLIO_BUDGET_m,
  INVESTMENT_PRID,
  INVESTMENT_ID,
  ENTITY_CODE,
  INVESTMENT_NAME,
  INVESTMENT_TYPE,
  IS_ACTIVE,
  IS_ACTIVE_BOOL,
  MANAGER_ID,
  PRIORITY,
  PROGRESS_CODE,
  PROGRESS_NAME,
  MANAGER_NAME,
  OPEN_FOR_TE,
  OPEN_FOR_TE_BOOL,
  PROJECT_TYPE,
  PROJECT_TYPE_ID,
  DEPARTMENT_TYPE,
  BUSINESS_UNIT_ID,
  BUSINESS_UNIT_NAME,
  -- total costs
  SUM(FORECAST_TOTAL_COST) FORECAST_TOTAL_COST,
  SUM(BUDGET_TOTAL_COST) BUDGET_TOTAL_COST,
  SUM(ACTUAL_TOTAL_COST) ACTUAL_TOTAL_COST,
  -- budget costs
  SUM(BUDGET_LABOR_COST) BUDGET_LABOR_COST,
  SUM(BUDGET_SOFTWARE_COST) BUDGET_SOFTWARE_COST,
  SUM(BUDGET_HARDWARE_COST) BUDGET_HARDWARE_COST,
  SUM(BUDGET_PROFSERV_COST) BUDGET_PROFSERV_COST,
  SUM(BUDGET_OTHER_COST) BUDGET_OTHER_COST,
  SUM(BUDGET_OTHERCOM_COST) BUDGET_OTHERCOM_COST,
  (SUM(BUDGET_LABOR_COST) + SUM(BUDGET_PROFSERV_COST)) BUDGET_CHARGE_COST,
  (SUM(BUDGET_SOFTWARE_COST) + SUM(BUDGET_HARDWARE_COST) + SUM(BUDGET_OTHER_COST) + SUM(BUDGET_OTHERCOM_COST)) BUDGET_SUMMARY_COST,
  -- forecast costs
  SUM(FORECAST_LABOR_COST) FORECAST_LABOR_COST,
  SUM(FORECAST_SOFTWARE_COST) FORECAST_SOFTWARE_COST,
  SUM(FORECAST_HARDWARE_COST) FORECAST_HARDWARE_COST,
  SUM(FORECAST_PROFSERV_COST) FORECAST_PROFSERV_COST,
  SUM(FORECAST_OTHER_COST) FORECAST_OTHER_COST,
  SUM(FORECAST_OTHERCOM_COST) FORECAST_OTHERCOM_COST,
  (SUM(FORECAST_LABOR_COST) + SUM(FORECAST_PROFSERV_COST)) FORECAST_CHARGE_COST,
  (SUM(FORECAST_SOFTWARE_COST) + SUM(FORECAST_HARDWARE_COST) + SUM(FORECAST_OTHER_COST) + SUM(FORECAST_OTHERCOM_COST)) FORECAST_SUMMARY_COST,
  -- actual cost
  SUM(ACTUAL_LABOR_COST) ACTUAL_LABOR_COST,
  SUM(ACTUAL_SOFTWARE_COST) ACTUAL_SOFTWARE_COST,
  SUM(ACTUAL_HARDWARE_COST) ACTUAL_HARDWARE_COST,
  SUM(ACTUAL_PROFSERV_COST) ACTUAL_PROFSERV_COST,
  SUM(ACTUAL_OTHER_COST) ACTUAL_OTHER_COST,
  SUM(ACTUAL_OTHERCOM_COST) ACTUAL_OTHERCOM_COST,
  (SUM(ACTUAL_LABOR_COST) + SUM(ACTUAL_PROFSERV_COST)) ACTUAL_CHARGE_COST,
  (SUM(ACTUAL_SOFTWARE_COST) + SUM(ACTUAL_HARDWARE_COST) + SUM(ACTUAL_OTHER_COST) + SUM(ACTUAL_OTHERCOM_COST)) ACTUAL_SUMMARY_COST,
  -- actual cost for customer projects - external/non-ci projects
  CASE WHEN PROJECT_TYPE_ID IN 'Production_Support' THEN SUM(BUDGET_LABOR_COST) ELSE SUM(ACTUAL_LABOR_COST) END ACTUAL_EXT_LABOR_COST,
  SUM(ACTUAL_PROFSERV_COST) ACTUAL_EXT_PROFSERV_COST,
  CASE WHEN PROJECT_TYPE_ID IN 'Production_Support' THEN SUM(BUDGET_LABOR_COST) + SUM(ACTUAL_PROFSERV_COST) ELSE SUM(ACTUAL_LABOR_COST) END + SUM(ACTUAL_PROFSERV_COST) ACTUAL_EXT_CHARGE_COST,
  -- budget and forecast variance costs
  SUM(BUDGET_TOTAL_COST) - SUM(FORECAST_TOTAL_COST) BUDGET_FORECAST_TOTAL_VAR,
  SUM(BUDGET_LABOR_COST) - SUM(FORECAST_LABOR_COST) BUDGET_FORECAST_LABOR_VAR,    
  SUM(BUDGET_SOFTWARE_COST) - SUM(FORECAST_SOFTWARE_COST) BUDGET_FORECAST_SOFTWARE_VAR,
  SUM(BUDGET_HARDWARE_COST) - SUM(FORECAST_HARDWARE_COST) BUDGET_FORECAST_HARDWARE_VAR,
  SUM(BUDGET_PROFSERV_COST) - SUM(FORECAST_PROFSERV_COST) BUDGET_FORECAST_PROFSERV_VAR,
  SUM(BUDGET_OTHER_COST) - SUM(FORECAST_OTHER_COST) BUDGET_FORECAST_OTHER_VAR,
  SUM(BUDGET_OTHERCOM_COST) - SUM(FORECAST_OTHERCOM_COST) BUDGET_FORECAST_OTHERCOM_VAR,
  (SUM(BUDGET_LABOR_COST) + SUM(BUDGET_PROFSERV_COST)) - (SUM(FORECAST_LABOR_COST) + SUM(FORECAST_PROFSERV_COST)) BUDGET_FORECAST_CHARGE_VAR,
  -- forecast and actual variance costs
  SUM(FORECAST_TOTAL_COST) - SUM(ACTUAL_TOTAL_COST) FORECAST_ACTUAL_TOTAL_VAR,
  SUM(FORECAST_LABOR_COST) - SUM(ACTUAL_LABOR_COST) FORECAST_ACTUAL_LABOR_VAR,    
  SUM(FORECAST_SOFTWARE_COST) - SUM(ACTUAL_SOFTWARE_COST) FORECAST_ACTUAL_SOFTWARE_VAR,
  SUM(FORECAST_HARDWARE_COST) - SUM(ACTUAL_HARDWARE_COST) FORECAST_ACTUAL_HARDWARE_VAR,
  SUM(FORECAST_PROFSERV_COST) - SUM(ACTUAL_PROFSERV_COST) FORECAST_ACTUAL_PROFSERV_VAR,
  SUM(FORECAST_OTHER_COST) - SUM(ACTUAL_OTHER_COST) FORECAST_ACTUAL_OTHER_VAR,
  SUM(FORECAST_OTHERCOM_COST) - SUM(ACTUAL_OTHERCOM_COST) FORECAST_ACTUAL_OTHERCOM_VAR,
  (SUM(FORECAST_LABOR_COST) + SUM(FORECAST_PROFSERV_COST)) - (SUM(ACTUAL_LABOR_COST) + SUM(ACTUAL_PROFSERV_COST)) FORECAST_ACTUAL_CHARGE_VAR
FROM (
SELECT 
  P_CONTENTS.PORTFOLIO_ID PORTFOLIO_ID,
  PORTFOLIOS.NAME PORTFOLIO_NAME,
  PORTFOLIOS.START_DATE PORTFOLIO_START_DT,
  PORTFOLIOS.FINISH_DATE PORTFOLIO_FINISH_DT,
  PORTFOLIOS.BDGT_CST_TOTAL PORTFOLIO_BUDGET,
  (NVL(PORTFOLIOS.BDGT_CST_TOTAL,0)) PORTFOLIO_BUDGET_m,
  INVESTMENTS.ID INVESTMENT_PRID,
  INVESTMENTS.CODE INVESTMENT_ID,
  INVESTMENTS.ENTITY_CODE ENTITY_CODE,
  INVESTMENTS.NAME INVESTMENT_NAME,
  INVESTMENTS.ODF_OBJECT_CODE INVESTMENT_TYPE,
  INVESTMENTS.IS_ACTIVE IS_ACTIVE,
  INVESTMENTS.IS_ACTIVE IS_ACTIVE_BOOL,
  INVESTMENTS.MANAGER_ID MANAGER_ID,
  INVESTMENTS.PRIORITY PRIORITY,
  INVESTMENTS.PROGRESS PROGRESS_CODE,
  PROGRESS_LOOKUP.NAME PROGRESS_NAME,
  PROJECT_MANAGERS.FULL_NAME MANAGER_NAME,
  INVESTMENTS.IS_OPEN_FOR_TE OPEN_FOR_TE,
  INVESTMENTS.IS_OPEN_FOR_TE OPEN_FOR_TE_BOOL,
  ODF_PROJ.OBJ_REQUEST_TYPE OBJ_REQUEST_TYPE,
  PROJ_TYPE.ID PROJECT_TYPE_ID,
  PROJ_TYPE.NAME PROJECT_TYPE,
  OBS_DEPARTMENTS.DEPARTMENT_TYPE DEPARTMENT_TYPE,
  OBS_DEPARTMENTS.BUSINESS_UNIT_ID BUSINESS_UNIT_ID,
  OBS_DEPARTMENTS.BUSINESS_UNIT_NAME BUSINESS_UNIT_NAME,
  -- total costs
  FORECAST_TOTAL_COST,
  BUDGET_TOTAL_COST,
  ACTUAL_TOTAL_COST,
  -- budget costs
  BUDGET_LABOR_COST,
  BUDGET_SOFTWARE_COST,
  BUDGET_HARDWARE_COST,
  BUDGET_PROFSERV_COST,
  BUDGET_OTHER_COST,
  BUDGET_OTHERCOM_COST,
  -- forecast costs
  FORECAST_LABOR_COST,
  FORECAST_SOFTWARE_COST,
  FORECAST_HARDWARE_COST,
  FORECAST_PROFSERV_COST,
  FORECAST_OTHER_COST,
  FORECAST_OTHERCOM_COST,
  -- actual cost
  ACTUAL_LABOR_COST,
  ACTUAL_SOFTWARE_COST,
  ACTUAL_HARDWARE_COST,
  ACTUAL_PROFSERV_COST,
  ACTUAL_OTHER_COST,
  ACTUAL_OTHERCOM_COST
FROM
  WARM01.PMA_PORTFOLIO_CONTENTS P_CONTENTS,
  WARM01.PMA_PORTFOLIOS PORTFOLIOS,
  WARM01.INV_INVESTMENTS INVESTMENTS,
  WARM01.SRM_RESOURCES PROJECT_MANAGERS,
  WARM01.ODF_CA_PROJECT ODF_PROJ,
  (SELECT LOOKUP_CODE ID,NAME FROM WARM01.CMN_LOOKUPS_V WHERE LOOKUP_TYPE='OBJ_IDEA_PROJECT_TYPE' AND LANGUAGE_CODE='en') PROJ_TYPE,
  (SELECT LOOKUP_ENUM ID, NAME NAME FROM WARM01.CMN_LOOKUPS_V WHERE LOOKUP_TYPE='INVESTMENT_OBJ_PROGRESS' AND LANGUAGE_CODE='en') PROGRESS_LOOKUP,
  (SELECT INVESTMENTS_OBS_UNITS.INVESTMENT_ID,DEPARTMENT_TYPES.NAME DEPARTMENT_TYPE,CASE WHEN BUSINESS_UNITS.UNIT_ID IS NULL THEN '6101' ELSE BUSINESS_UNITS.UNIQUE_NAME END BUSINESS_UNIT_ID,CASE WHEN BUSINESS_UNITS.UNIT_ID IS NULL THEN 'Corporate Information' ELSE BUSINESS_UNITS.NAME  END BUSINESS_UNIT_NAME FROM (SELECT INV_OBS_UNITS.INVESTMENT_ID, INV_OBS_UNITS.OBS_UNIT FROM WARM01.INV_OBS_ONLY_V INV_OBS_UNITS, WARM01.PRJ_OBS_UNITS OBS_UNITS, WARM01.PRJ_OBS_TYPES OBS_TYPES WHERE INV_OBS_UNITS.OBS_UNIT = OBS_UNITS.ID AND OBS_UNITS.TYPE_ID = OBS_TYPES.ID AND OBS_TYPES.ID = 5000001) INVESTMENTS_OBS_UNITS, 
  (SELECT UNIT_ID, UNIQUE_NAME, NAME FROM WARM01.OBS_UNITS_V WHERE DEPTH = 1 AND UNIT_MODE = 'OBS_UNIT_AND_ANCESTORS') DEPARTMENT_TYPES, 
  (SELECT UNIT_ID, UNIQUE_NAME, NAME FROM WARM01.OBS_UNITS_V WHERE DEPTH = 3 AND UNIT_MODE = 'OBS_UNIT_AND_ANCESTORS') BUSINESS_UNITS WHERE INVESTMENTS_OBS_UNITS.OBS_UNIT = DEPARTMENT_TYPES.UNIT_ID(+) AND INVESTMENTS_OBS_UNITS.OBS_UNIT = BUSINESS_UNITS.UNIT_ID(+)) OBS_DEPARTMENTS,
  (
    SELECT INVESTMENTS.ID PROJECT_ID,
           COSTS.START_DATE,
           -- total costs
           CASE WHEN PLANS.PLAN_TYPE_CODE = 'FORECAST' THEN ROUND(COSTS.SLICE*(TO_DATE(COSTS.FINISH_DATE)-TO_DATE(COSTS.START_DATE)),2) ELSE 0 END FORECAST_TOTAL_COST,
           CASE WHEN PLANS.PLAN_TYPE_CODE = 'BUDGET' THEN ROUND(COSTS.SLICE*(TO_DATE(COSTS.FINISH_DATE)-TO_DATE(COSTS.START_DATE)),2) ELSE 0 END BUDGET_TOTAL_COST,
           0 ACTUAL_TOTAL_COST,
           -- budget costs
           CASE WHEN PLANS.PLAN_TYPE_CODE = 'BUDGET' AND CLASSES.TRANSCLASS = 'Labor' THEN ROUND(COSTS.SLICE*(TO_DATE(COSTS.FINISH_DATE)-TO_DATE(COSTS.START_DATE)),2) ELSE 0 END BUDGET_LABOR_COST,
           CASE WHEN PLANS.PLAN_TYPE_CODE = 'BUDGET' AND CLASSES.TRANSCLASS = 'Software' THEN ROUND(COSTS.SLICE*(TO_DATE(COSTS.FINISH_DATE)-TO_DATE(COSTS.START_DATE)),2) ELSE 0 END BUDGET_SOFTWARE_COST,
           CASE WHEN PLANS.PLAN_TYPE_CODE = 'BUDGET' AND CLASSES.TRANSCLASS = 'Hardware' THEN ROUND(COSTS.SLICE*(TO_DATE(COSTS.FINISH_DATE)-TO_DATE(COSTS.START_DATE)),2) ELSE 0 END BUDGET_HARDWARE_COST,
           CASE WHEN PLANS.PLAN_TYPE_CODE = 'BUDGET' AND CLASSES.TRANSCLASS = 'ProfServ' THEN ROUND(COSTS.SLICE*(TO_DATE(COSTS.FINISH_DATE)-TO_DATE(COSTS.START_DATE)),2) ELSE 0 END BUDGET_PROFSERV_COST,
           CASE WHEN PLANS.PLAN_TYPE_CODE = 'BUDGET' AND CLASSES.TRANSCLASS = 'Other' THEN ROUND(COSTS.SLICE*(TO_DATE(COSTS.FINISH_DATE)-TO_DATE(COSTS.START_DATE)),2) ELSE 0 END BUDGET_OTHER_COST,
           CASE WHEN PLANS.PLAN_TYPE_CODE = 'BUDGET' AND CLASSES.TRANSCLASS = 'OtherCom' THEN ROUND(COSTS.SLICE*(TO_DATE(COSTS.FINISH_DATE)-TO_DATE(COSTS.START_DATE)),2) ELSE 0 END BUDGET_OTHERCOM_COST,
           -- forecast costs
           CASE WHEN PLANS.PLAN_TYPE_CODE = 'FORECAST' AND CLASSES.TRANSCLASS = 'Labor' THEN ROUND(COSTS.SLICE*(TO_DATE(COSTS.FINISH_DATE)-TO_DATE(COSTS.START_DATE)),2) ELSE 0 END FORECAST_LABOR_COST,
           CASE WHEN PLANS.PLAN_TYPE_CODE = 'FORECAST' AND CLASSES.TRANSCLASS = 'Software' THEN ROUND(COSTS.SLICE*(TO_DATE(COSTS.FINISH_DATE)-TO_DATE(COSTS.START_DATE)),2) ELSE 0 END FORECAST_SOFTWARE_COST,
           CASE WHEN PLANS.PLAN_TYPE_CODE = 'FORECAST' AND CLASSES.TRANSCLASS = 'Hardware' THEN ROUND(COSTS.SLICE*(TO_DATE(COSTS.FINISH_DATE)-TO_DATE(COSTS.START_DATE)),2) ELSE 0 END FORECAST_HARDWARE_COST,
           CASE WHEN PLANS.PLAN_TYPE_CODE = 'FORECAST' AND CLASSES.TRANSCLASS = 'ProfServ' THEN ROUND(COSTS.SLICE*(TO_DATE(COSTS.FINISH_DATE)-TO_DATE(COSTS.START_DATE)),2) ELSE 0 END FORECAST_PROFSERV_COST,
           CASE WHEN PLANS.PLAN_TYPE_CODE = 'FORECAST' AND CLASSES.TRANSCLASS = 'Other' THEN ROUND(COSTS.SLICE*(TO_DATE(COSTS.FINISH_DATE)-TO_DATE(COSTS.START_DATE)),2) ELSE 0 END FORECAST_OTHER_COST,
           CASE WHEN PLANS.PLAN_TYPE_CODE = 'FORECAST' AND CLASSES.TRANSCLASS = 'OtherCom' THEN ROUND(COSTS.SLICE*(TO_DATE(COSTS.FINISH_DATE)-TO_DATE(COSTS.START_DATE)),2) ELSE 0 END FORECAST_OTHERCOM_COST,
           -- actual cost
           0 ACTUAL_LABOR_COST,
           0 ACTUAL_SOFTWARE_COST,
           0 ACTUAL_HARDWARE_COST,
           0 ACTUAL_PROFSERV_COST,
           0 ACTUAL_OTHER_COST,
           0 ACTUAL_OTHERCOM_COST
      FROM WARM01.ODF_SSL_CST_DTL_COST COSTS,
           WARM01.FIN_COST_PLAN_DETAILS DETAILS,
           WARM01.TRANSCLASS CLASSES,
           WARM01.FIN_PLANS PLANS,
           WARM01.INV_INVESTMENTS INVESTMENTS
     WHERE     COSTS.PRJ_OBJECT_ID = DETAILS.ID
           AND DETAILS.PLAN_ID = PLANS.ID
           AND DETAILS.TRANSCLASS_ID = CLASSES.ID
           AND PLANS.OBJECT_ID = INVESTMENTS.ID
           AND PLANS.IS_PLAN_OF_RECORD = 1
           
    UNION ALL
    
    SELECT WIP.INVESTMENT_ID,
           WIP.MONTH_BEGIN,
           -- total costs
           0 TOTAL_PLAN_COST,
           0 TOTAL_BUDGET_COST,
           NVL(WIP_VALUES.TOTALCOST,0) TOTAL_ACTUAL_COST,
           -- budget costs
           0 BUDGET_LABOR_COST,
           0 BUDGET_SOFTWARE_COST,
           0 BUDGET_HARDWARE_COST,
           0 BUDGET_PROFSERV_COST,
           0 BUDGET_OTHER_COST,
           0 BUDGET_OTHERCOM_COST,
           -- forecast costs
           0 FORECAST_LABOR_COST,
           0 FORECAST_SOFTWARE_COST,
           0 FORECAST_HARDWARE_COST,
           0 FORECAST_PROFSERV_COST,
           0 FORECAST_OTHER_COST,
           0 FORECAST_OTHERCOM_COST,
           -- actual cost
           CASE WHEN WIP.TRANSCLASS = 'Labor' THEN NVL(WIP_VALUES.TOTALCOST,0) ELSE 0 END ACTUAL_LABOR_COST,
           CASE WHEN WIP.TRANSCLASS = 'Software' THEN NVL(WIP_VALUES.TOTALCOST,0) ELSE 0 END ACTUAL_SOFTWARE_COST,
           CASE WHEN WIP.TRANSCLASS = 'Hardware' THEN NVL(WIP_VALUES.TOTALCOST,0) ELSE 0 END ACTUAL_HARDWARE_COST,
           CASE WHEN WIP.TRANSCLASS = 'ProfServ' THEN NVL(WIP_VALUES.TOTALCOST,0) ELSE 0 END ACTUAL_PROFSERV_COST,
           CASE WHEN WIP.TRANSCLASS = 'Other' THEN NVL(WIP_VALUES.TOTALCOST,0) ELSE 0 END ACTUAL_OTHER_COST,
           CASE WHEN WIP.TRANSCLASS = 'OtherCom' THEN NVL(WIP_VALUES.TOTALCOST,0) ELSE 0 END ACTUAL_OTHERCOM_COST
      FROM WARM01.PPA_WIP_VALUES WIP_VALUES, WARM01.PPA_WIP WIP
     WHERE     WIP_VALUES.TRANSNO = WIP.TRANSNO
           AND WIP.STATUS NOT IN (2, 8)
           AND WIP_VALUES.CURRENCY_TYPE = 'BILLING'
        ) PROJECT_FINANCIALS
WHERE 
  P_CONTENTS.INVEST_ID = INVESTMENTS.ID
  AND PORTFOLIOS.ID = P_CONTENTS.PORTFOLIO_ID
  AND INVESTMENTS.PROGRESS = PROGRESS_LOOKUP.ID    
  AND INVESTMENTS.MANAGER_ID = PROJECT_MANAGERS.USER_ID
  AND INVESTMENTS.ID = ODF_PROJ.ID
  AND ODF_PROJ.OBJ_REQUEST_TYPE = PROJ_TYPE.ID
  AND INVESTMENTS.ID = OBS_DEPARTMENTS.INVESTMENT_ID
  AND INVESTMENTS.ID = PROJECT_FINANCIALS.PROJECT_ID(+)
  AND PROJECT_FINANCIALS.START_DATE BETWEEN PORTFOLIOS.START_DATE AND PORTFOLIOS.FINISH_DATE-1)
GROUP BY
  PORTFOLIO_ID,
  PORTFOLIO_NAME,
  PORTFOLIO_START_DT,
  PORTFOLIO_FINISH_DT,
  PORTFOLIO_BUDGET,
  PORTFOLIO_BUDGET_m,
  INVESTMENT_PRID,
  INVESTMENT_ID,
  ENTITY_CODE,
  INVESTMENT_NAME,
  INVESTMENT_TYPE,
  IS_ACTIVE,
  IS_ACTIVE_BOOL,
  MANAGER_ID,
  PRIORITY,
  PROGRESS_CODE,
  PROGRESS_NAME,
  MANAGER_NAME,
  OPEN_FOR_TE,
  OPEN_FOR_TE_BOOL,
  PROJECT_TYPE_ID,
  PROJECT_TYPE,
  DEPARTMENT_TYPE,
  BUSINESS_UNIT_ID,
  BUSINESS_UNIT_NAME

)
WHERE 
  PORTFOLIO_ID = @WHERE:PARAM:XML:INTEGER:/data/id/@value@
  AND @FILTER@